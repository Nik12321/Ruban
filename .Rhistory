pearson.test(x)
ks.test(x, "pexp")
ks.test(x, "punif")
shapiro.test(y)
pearson.test(y)
ks.test(y, "pexp")
ks.test(y, "punif")
wilcox.test(x, y, alternative = "less", paired = TRUE)
#alpha = 0.05
var.test(x, y, alternative = "two.sided")
data(iris)
x = iris[iris$Species == "setosa",]$Sepal.Length
pearson.test(x)
ks.test(x,"pnorm",mean(x),sd(x))
ks.test(x,iris[iris$Species == "versicolor",]$Sepal.Length)
data("attitude")
lh <- attitude$complaints
lh
data()
attitude
data(cars)
cars
data("cars")
lh <- attitude$dist
y = qqnorm(lh)
lh
data("cars")
lh <- cars$dist
lh
data(cars)
lh <- cars$dist
y = qqnorm(lh)
qqline(lh, col = 2)
lines(stats::lowess(y),col = 4)
shapiro.test(lh)
t.test(lh, mu = 66, alternative = "less")
y = qqnorm(lh)
qqline(lh, col = 2)
lines(stats::lowess(y),col = 4)
data("trees")
lat <- trees$Volume
trees
data("AirPassengers")
AirPassengers
setwd("C:\Users\Nik\Desktop")
setwd("C:/Users/Nik/Desktop")
setwd("C:/Users/Nik/Desktop/Ruban")
devtools::load_all()
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
nuclearType = "nuclearExponential")
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
devtools::load_all()
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
addRowForDF(2,3)
x<-addRowForDF(2,3)
x
x<-addRowForDF(2,c(2,3))
x
x<-3
cols <- createColForDF(length(x))
cols
resultObj  <- extResult(iterations = 0,
allX = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
allDelta = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
uValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
testPoint = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
gminValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
pValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
pNormValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
testFitnessValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
x = x,
delta = delta,
lower = lower,
upper = upper,
n = n,
e = e,
M = M,
y = y,
q = q,
kernelType = kernelType,
r = r,
s = s
)
x=c(10,10)
delta=c(20,20)
lower=c(-10,-10)
upper = c(30,30)
f = f
n=500
y=1
q=2
s=100
e=0.0001
r=2
kernelType = "kernelExponential"
k <- 1
testX <- matrix(0, n, length(x))
fValues <- rep(0, n)
uValues <- matrix(0, n, length(x))
p <- rep(0, n)
pNorm <- rep(0, n)
allX <- matrix(0, M, length(x))
allX[1, ] <- x
allResults <- fitness(x)
cols <- createColForDF(length(x))
resultObj  <- extResult(iterations = 0,
allX = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
allDelta = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
uValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
testPoint = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
gminValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
pValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
pNormValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
testFitnessValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
x = x,
delta = delta,
lower = lower,
upper = upper,
n = n,
e = e,
M = M,
y = y,
q = q,
kernelType = kernelType,
r = r,
s = s
)
if (kernelType == "kernelExponential" ||
kernelType == "kernelHyperbolic" ||
kernelType == "kernelToDegreeS" ||
kernelType == "kernelExpHyperbolic")
kernelFunction <- get(kernelType)
else
kernelFunction <- get("kernelExponential")
j = 1
i = 1
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
uValues[i, j]
resultObj @uValues = rbind(resultObj @uValues, addRowForDF(k, uValues[i,]))
resultObj @uValues
j = 2
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
resultObj @uValues = rbind(resultObj @uValues, addRowForDF(k, uValues[i,]))
resultObj @uValues
testX[i, ] <- x + delta * uValues[i, ]
fValues[i] <- fitness(testX[i, ])
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
resultObj @uValues = rbind(resultObj @uValues, addRowForDF(k, uValues[i,]))
testX[i, ] <- x + delta * uValues[i, ]
fValues[i] <- fitness(testX[i, ])
resultObj @testPoint = rbind(resultObj @testPoint, addRowForDF(k, testX[i,]))
resultObj @testFitnessValues = rbind(resultObj @testFitnessValues, addRowForDF(k, fValues[i]))
resultObj @uValues = rbind(resultObj @uValues, addRowForDF(k, uValues[i,]))
resultObj @uValues
testX[i, ] <- x + delta * uValues[i, ]
fValues[i] <- fitness(testX[i, ])
fitness <-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
fValues[i] <- fitness(testX[i, ])
fValues[i]
resultObj @testPoint = rbind(resultObj @testPoint, addRowForDF(k, testX[i,]))
resultObj @testPoint
resultObj @testFitnessValues = rbind(resultObj @testFitnessValues, addRowForDF(k, fValues[i]))
addRowForDF(k, fValues[i])
resultObj @testFitnessValues
c(c(2,3), c(4,5))
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
cols <- createColForDF(length(x))
cols
с(cols, 3)
c(cols, 3)
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x=c(10,10)
delta=c(20,20)
lower=c(-10,-10)
upper = c(30,30)
f = f
n=500
y=1
q=2
s=100
e=0.0001
r=2
kernelType = "kernelExponential"
fitness <-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
cols <- createColForDF(length(x))
resultObj  <- extResult(iterations = 0,
allX = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
allDelta = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
uValues = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
testPoint = data.frame(Iteration = 0,  c(cols, "fintess value"), stringsAsFactors=FALSE),
gminValues = data.frame(Iteration = 0,  "value", stringsAsFactors=FALSE),
pValues = data.frame(Iteration = 0,  "value", stringsAsFactors=FALSE),
pNormValues = data.frame(Iteration = 0,  "value", stringsAsFactors=FALSE),
x = x,
delta = delta,
lower = lower,
upper = upper,
n = n,
e = e,
M = M,
y = y,
q = q,
kernelType = kernelType,
r = r,
s = s
)
resultObj@pNormValues
resultObj@pValues
resultObj@testPoint
|| e <= 0
k <- 1
testX <- matrix(0, n, length(x))
fValues <- rep(0, n)
uValues <- matrix(0, n, length(x))
p <- rep(0, n)
pNorm <- rep(0, n)
allX <- matrix(0, M, length(x))
allX[1, ] <- x
allResults <- fitness(x)
j = 1
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
j = 2
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
i = 1
j = 1
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
j = 2
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
resultObj @uValues = rbind(resultObj @uValues, addRowForDF(k, uValues[i,]))
testX[i, ] <- x + delta * uValues[i, ]
fValues[i] <- fitness(testX[i, ])
resultObj @testPoint = rbind(resultObj @testPoint, addRowForDF(k, c(testX[i,],  fValues[i])))
resultObj@testPoint
gmin <- rep(0, n)
for (i in 1:n) {
a <- fValues[i] - min(fValues)
b <- max(fValues) - min(fValues)
gmin[i] <- a / b
resultObj @gminValues = rbind(resultObj @gminValues, addRowForDF(k, gmin[i]))
}
resultObj@gminValues
i = 1
a <- fValues[i] - min(fValues)
b <- max(fValues) - min(fValues)
gmin[i] <- a / b
gmin
i = 2
a <- fValues[i] - min(fValues)
b <- max(fValues) - min(fValues)
gmin[i] <- a / b
gmin
for (i in 1:n) {
p[i] <- kernelFunction(z = gmin[i], r = r, s = s)
resultObj @pValues = rbind(resultObj @pValues, addRowForDF(k, p[i]))
}
for (i in 1:n) {
pNorm[i] <- p[i] / sum(p)
resultObj @pNormvalues = rbind(resultObj @pNormvalues, addRowForDF(k, pNorm[i]))
}
i = 1
pNorm[i] <- p[i] / sum(p)
pNorm
pNorm[1]
resultObj @pNormvalues = rbind(resultObj @pNormvalues, addRowForDF(k, pNorm[i]))
addRowForDF(1, pNorm[1])
resultObj @pNormvalues
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x@pNormValues
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x@pNormValues
n
x@pNormValues[x@pNormValues == 1,]
x@pNormValues[x@pNormValues == 2,]
x@pNormValues[x@pNormValues == 3,]
x@pNormValues[x@pNormValues == 4,]
x@pNormValues[x@pNormValues == 10,]
x@pNormValues[x@pNormValues == 11,]
x@pNormValues[x@pNormValues == 12,]
x@pNormValues[x@pNormValues == 11,]
x@pNormValues[x@pNormValues == 10,]
x@pNormValues[x@pNormValues == 1,]
x@pNormValues[x@pNormValues == 9,]
x@pValues
x@pValues[x@pValues == 1,]
x@pValues[x@pValues == 10,]
x@gminValues
x@testPoint
x@uValues
devtools::load_all()
x<-extRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
f = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x@pNormValues
x@pValues
x@gminValues
x@testPoint
x@uValues
