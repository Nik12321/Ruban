stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(1, -10, 1)
stats::runif(2, 0, 1)
x = 20
y = 10
10/20
10/1234
x <- 10
range <- c(-10, 10)
x<- c(5,5)
delta<-c(10,10)
x[1] + delta[1]
x[1] + delta[1] < range[2]
x[1] + delta[1] > range[2]
10/2
10/5
10-5
5/10
x[1] + delta[1]
x[1] - delta[1]
x[1] - delta[1] < range[1]
x[1] - delta[1] > range[1]
range
x[1] - delta[1] > range[1]
x <- c(-5,-5)
x[1] - delta[1] > range[1]
x[1] - delta[1] < range[1]
x[1]
de;ta[1]
delta[1]
x[1]
range[1]
-10 > x[1] + delta[1]
-10 > x[1] + delta[1]
x[1]
delta[1]
-10 - x[1]
-10 - x[1]
-5/delta[1]
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2 - 1
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
stats::runif(1, 0, 1) * 2
5/20
-0.5 * 10
+ x[1]
x[1]
x[2]
x[1] + -5
devtools::load_all()
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
x<-Rouban(x=c(10,10),
delta=c(100,100),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
x=c(10,10)
delta=c(100,100)
lower=c(-10,-10)
upper = c(30,30)
fitness = f
n=500
y=1
q=2
s=100
e=0.0001,
r=2
e=0.0001
r=2
kernelType = "kernelExponential"
f<-function(x) {
z<-7*(abs(x[1])^2) + 7*(abs(x[2])^2)
z<-c(z, 5*(abs(x[1]-3))^0.8 + 5*(abs(x[2]-3)^0.6) + 6)
z<-c(z, 5*(abs(x[1]-6))^1.3 + 5*(abs(x[2]-6)^1.3) + 2)
z<-c(z, 5*(abs(x[1]-6))^1 + 5*(abs(x[2]+6)^1) + 8)
z<-c(z, 4*(abs(x[1]+6))^1.5 + 4*(abs(x[2]+6)^1.5) + 7)
z<-c(z, 5*(abs(x[1]+3))^1.8 + 5*(abs(x[2])^1.8) + 9)
z<-c(z, 6*(abs(x[1]+6))^0.6 + 6*(abs(x[2]-6)^0.9))
return(min(z))
}
k <- 1
testX <- matrix(0, n, length(x))
fValues <- rep(0, n)
uValues <- matrix(0, n, length(x))
p <- rep(0, n)
pNorm <- rep(0, n)
allX <- matrix(0, M, length(x))
allX[1, ] <- x
allResults <- fitness(x)
cols <- createColForDF(length(x))
resultObj  <- sResult(iterations = 0,
allX = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
allDelta = data.frame(Iteration = 0,  cols, stringsAsFactors=FALSE),
x = x,
delta = delta,
lower = lower,
upper = upper,
n = n,
e = e,
M = M,
y = y,
q = q,
kernelType = kernelType,
r = r,
s = s
)
if (kernelType == "kernelExponential" ||
kernelType == "kernelHyperbolic" ||
kernelType == "kernelToDegreeS" ||
kernelType == "kernelExpHyperbolic")
kernelFunction <- get(kernelType)
else
kernelFunction <- get("kernelExponential")
kernelFunction
i = ``
i = 1
j = 1
lower[j]
x[j]
delta[j]
x[j] - delta[j] < lower[j]
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
a
0.4 * 2 - 1
-0.2 * delta[j] + x[j]
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
b
0.6 * 2 - 1
0.6 * 2 - 1
ANSWER <- readline("Are you a satisfied R user? ")
Answer
ANSWER
for (i in 1:n) {
for (j in 1:length(x)) {
if (x[j] - delta[j] < lower[j])
a <- (((lower[j] - x[j]) / delta[j]) + 1) / 2
else
a <- 0
if (x[j] + delta[j] > upper[j])
b <- (((upper[j] - x[j]) / delta[j]) + 1) / 2
else
b <- 1
uValues[i, j] <- stats::runif(1, a, b) * 2 - 1
}
testX[i, ] <- x + delta * uValues[i, ]
fValues[i] <- fitness(testX[i, ])
}
testX[1,]
testX[2,]
testX[3,]
testX[4,]
testX[5,]
testX[2,]
lower
upper
plot(lower, upper)
plot(c(lower[1], upper[1]), upper)
plot(c(lower[1], upper[1]))
plot(c(lower[1], upper[1]), c(lower[2], upper[2]))
devtools::load_all()
x
delta
x<-Rouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
summary(x)
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
N
summary(x)
ANSWER <- readline()
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
N
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
N
N
N
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
N
N
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
N
summary(x)
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
cat("uValues for x", j, uValues[i, j], "\n")
cat("uValues for x", j, uValues[i, j], "\n")
cat(paste0(uValues for x", j), uValues[i, j], "\n")
cat(paste0("uValues for x", j), uValues[i, j], "\n")
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
devtools::load_all()
x<-IterativeRouban(x=c(10,10),
delta=c(20,20),
lower=c(-10,-10),
upper = c(30,30),
fitness = f,
n=500,
y=1,
q=2,
s=100,
e=0.0001,
r=2,
kernelType = "kernelExponential")
